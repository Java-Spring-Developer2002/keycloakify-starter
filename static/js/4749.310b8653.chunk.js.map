{"version":3,"file":"static/js/4749.310b8653.chunk.js","mappings":"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","sources":["KcApp/Register.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["// This is a copy paste from https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/components/Register.tsx\r\n// It is now up to us to implement a special behavior to leverage the non standard authorizedMailDomains\r\n// provided by the plugin: https://github.com/micedre/keycloak-mail-whitelisting installed on our keycloak server.\r\n// Note that it is no longer recommended to use register.ftl, it's best to use register-user-profile.ftl\r\n// See: https://docs.keycloakify.dev/realtime-input-validation\r\n\r\nimport { memo } from \"react\";\r\nimport Template from \"keycloakify/lib/components/Template\";\r\nimport type { KcProps } from \"keycloakify\";\r\nimport type { KcContext } from \"./kcContext\";\r\nimport { clsx } from \"keycloakify/lib/tools/clsx\";\r\nimport type { I18n } from \"./i18n\";\r\n\r\ntype KcContext_Register = Extract<KcContext, { pageId: \"register.ftl\"; }>;\r\n\r\nconst Register = memo(({ kcContext, i18n, ...props }: { kcContext: KcContext_Register; i18n: I18n; } & KcProps) => {\r\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\r\n\r\n    const { msg, msgStr } = i18n;\r\n\r\n\tconsole.log(`NOTE: It is up to you do do something meaningful with ${kcContext.authorizedMailDomains}`)\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, ...props }}\r\n            doFetchDefaultThemeResources={true}\r\n            headerNode={msg(\"registerTitle\")}\r\n            formNode={\r\n                <form id=\"kc-register-form\" className={clsx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\r\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\r\n                        <div className={clsx(props.kcLabelWrapperClass)}>\r\n                            <label htmlFor=\"firstName\" className={clsx(props.kcLabelClass)}>\r\n                                {msg(\"firstName\")}\r\n                            </label>\r\n                        </div>\r\n                        <div className={clsx(props.kcInputWrapperClass)}>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"firstName\"\r\n                                className={clsx(props.kcInputClass)}\r\n                                name=\"firstName\"\r\n                                defaultValue={register.formData.firstName ?? \"\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\r\n                        <div className={clsx(props.kcLabelWrapperClass)}>\r\n                            <label htmlFor=\"lastName\" className={clsx(props.kcLabelClass)}>\r\n                                {msg(\"lastName\")}\r\n                            </label>\r\n                        </div>\r\n                        <div className={clsx(props.kcInputWrapperClass)}>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"lastName\"\r\n                                className={clsx(props.kcInputClass)}\r\n                                name=\"lastName\"\r\n                                defaultValue={register.formData.lastName ?? \"\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\r\n                        <div className={clsx(props.kcLabelWrapperClass)}>\r\n                            <label htmlFor=\"email\" className={clsx(props.kcLabelClass)}>\r\n                                {msg(\"email\")}\r\n                            </label>\r\n                        </div>\r\n                        <div className={clsx(props.kcInputWrapperClass)}>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"email\"\r\n                                className={clsx(props.kcInputClass)}\r\n                                name=\"email\"\r\n                                defaultValue={register.formData.email ?? \"\"}\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {!realm.registrationEmailAsUsername && (\r\n                        <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\r\n                            <div className={clsx(props.kcLabelWrapperClass)}>\r\n                                <label htmlFor=\"username\" className={clsx(props.kcLabelClass)}>\r\n                                    {msg(\"username\")}\r\n                                </label>\r\n                            </div>\r\n                            <div className={clsx(props.kcInputWrapperClass)}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"username\"\r\n                                    className={clsx(props.kcInputClass)}\r\n                                    name=\"username\"\r\n                                    defaultValue={register.formData.username ?? \"\"}\r\n                                    autoComplete=\"username\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    {passwordRequired && (\r\n                        <>\r\n                            <div className={clsx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\r\n                                <div className={clsx(props.kcLabelWrapperClass)}>\r\n                                    <label htmlFor=\"password\" className={clsx(props.kcLabelClass)}>\r\n                                        {msg(\"password\")}\r\n                                    </label>\r\n                                </div>\r\n                                <div className={clsx(props.kcInputWrapperClass)}>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        className={clsx(props.kcInputClass)}\r\n                                        name=\"password\"\r\n                                        autoComplete=\"new-password\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div\r\n                                className={clsx(\r\n                                    props.kcFormGroupClass,\r\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\r\n                                )}\r\n                            >\r\n                                <div className={clsx(props.kcLabelWrapperClass)}>\r\n                                    <label htmlFor=\"password-confirm\" className={clsx(props.kcLabelClass)}>\r\n                                        {msg(\"passwordConfirm\")}\r\n                                    </label>\r\n                                </div>\r\n                                <div className={clsx(props.kcInputWrapperClass)}>\r\n                                    <input type=\"password\" id=\"password-confirm\" className={clsx(props.kcInputClass)} name=\"password-confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    {recaptchaRequired && (\r\n                        <div className=\"form-group\">\r\n                            <div className={clsx(props.kcInputWrapperClass)}>\r\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <div className={clsx(props.kcFormGroupClass)}>\r\n                        <div id=\"kc-form-options\" className={clsx(props.kcFormOptionsClass)}>\r\n                            <div className={clsx(props.kcFormOptionsWrapperClass)}>\r\n                                <span>\r\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id=\"kc-form-buttons\" className={clsx(props.kcFormButtonsClass)}>\r\n                            <input\r\n                                className={clsx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\r\n                                type=\"submit\"\r\n                                value={msgStr(\"doRegister\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n        />\r\n    );\r\n});\r\n\r\nexport default Register;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["Register","memo","kcContext","i18n","props","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","console","log","authorizedMailDomains","doFetchDefaultThemeResources","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}