{"version":3,"file":"static/js/6965.78b9c02b.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/UpdateUserProfile.tsx","../node_modules/keycloakify/src/login/pages/shared/UserProfileCommons.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"keycloakify/login/pages/shared/UserProfileCommons\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function UpdateUserProfile(props: PageProps<Extract<KcContext, { pageId: \"update-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} headerNode={msg(\"loginProfileTitle\")}>\n            <form id=\"kc-update-profile-form\" className={getClassName(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFomSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n\n                <div className={getClassName(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}></div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    type=\"submit\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonDefaultClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    type=\"submit\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                    formNoValidate\n                                >\n                                    {msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\"),\n                                    getClassName(\"kcButtonBlockClass\"),\n                                    getClassName(\"kcButtonLargeClass\")\n                                )}\n                                type=\"submit\"\n                                defaultValue={msgStr(\"doSubmit\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        )}\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["UpdateUserProfile","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","_jsx","Object","headerNode","children","_jsxs","id","className","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","clsx","type","value","name","formNoValidate","defaultValue","disabled","BeforeField","AfterField","advancedMsg","useFormValidation","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","Fragment","htmlFor","displayName","_a","required","options","validators","undefined","onChange","event","target","onBlur","option","readOnly","autoComplete","autocomplete","divId","style","errorMessage"],"sourceRoot":""}