{"version":3,"file":"static/js/2556.7f8882a7.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/account/lib/useGetClassName.ts","../node_modules/keycloakify/src/account/pages/Password.tsx","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/tsafe/src/typeGuard.ts","../node_modules/keycloakify/src/tools/clsx.ts"],"sourcesContent":["import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/account/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcButtonClass\": \"btn\",\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonDefaultClass\": \"btn-default\"\n    }\n});\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/account/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/account/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function LogoutConfirm(props: PageProps<Extract<KcContext, { pageId: \"password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": {\n            ...classes,\n            \"kcBodyClass\": clsx(classes?.kcBodyClass, \"password\")\n        }\n    });\n\n    const { url, password, account, stateChecker } = kcContext;\n\n    const { msg } = i18n;\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} active=\"password\">\n            <div className=\"row\">\n                <div className=\"col-md-10\">\n                    <h2>{msg(\"changePasswordHtmlTitle\")}</h2>\n                </div>\n                <div className=\"col-md-2 subtitle\">\n                    <span className=\"subtitle\">${msg(\"allFieldsRequired\")}</span>\n                </div>\n            </div>\n\n            <form action={url.passwordUrl} className=\"form-horizontal\" method=\"post\">\n                <input\n                    type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    value={account.username ?? \"\"}\n                    autoComplete=\"username\"\n                    readOnly\n                    style={{ \"display\": \"none;\" }}\n                />\n\n                {password.passwordSet && (\n                    <div className=\"form-group\">\n                        <div className=\"col-sm-2 col-md-2\">\n                            <label htmlFor=\"password\" className=\"control-label\">\n                                {msg(\"password\")}\n                            </label>\n                        </div>\n\n                        <div className=\"col-sm-10 col-md-10\">\n                            <input type=\"password\" className=\"form-control\" id=\"password\" name=\"password\" autoFocus autoComplete=\"current-password\" />\n                        </div>\n                    </div>\n                )}\n\n                <input type=\"hidden\" id=\"stateChecker\" name=\"stateChecker\" value={stateChecker} />\n\n                <div className=\"form-group\">\n                    <div className=\"col-sm-2 col-md-2\">\n                        <label htmlFor=\"password-new\" className=\"control-label\">\n                            {msg(\"passwordNew\")}\n                        </label>\n                    </div>\n\n                    <div className=\"col-sm-10 col-md-10\">\n                        <input type=\"password\" className=\"form-control\" id=\"password-new\" name=\"password-new\" autoComplete=\"new-password\" />\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"col-sm-2 col-md-2\">\n                        <label htmlFor=\"password-confirm\" className=\"control-label two-lines\">\n                            {msg(\"passwordConfirm\")}\n                        </label>\n                    </div>\n\n                    <div className=\"col-sm-10 col-md-10\">\n                        <input type=\"password\" className=\"form-control\" id=\"password-confirm\" name=\"password-confirm\" autoComplete=\"new-password\" />\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <div id=\"kc-form-buttons\" className=\"col-md-offset-2 col-md-10 submit\">\n                        <div>\n                            <button\n                                type=\"submit\"\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\"),\n                                    getClassName(\"kcButtonLargeClass\")\n                                )}\n                                name=\"submitAction\"\n                                value=\"Save\"\n                            >\n                                {msg(\"doSave\")}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n"],"names":["useGetClassName","createUseClassName","undefined","LogoutConfirm","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","Object","clsx","kcBodyClass","url","password","account","stateChecker","msg","_jsxs","active","children","className","_jsx","action","passwordUrl","method","type","id","name","value","username","_a","autoComplete","readOnly","style","passwordSet","htmlFor","autoFocus","params","defaultClasses","useConstCallback","classKey","typeGuard","_value","isMatched","len","length","i","cls","arg","toAdd","Array","isArray","k","assert"],"sourceRoot":""}