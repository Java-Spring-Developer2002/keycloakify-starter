{"version":3,"file":"static/js/5738.cfd02372.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/Login.tsx","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/tsafe/src/typeGuard.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                            social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {(() => {\n                                    const label = !realm.loginWithEmailAllowed\n                                        ? \"username\"\n                                        : realm.registrationEmailAsUsername\n                                        ? \"email\"\n                                        : \"usernameOrEmail\";\n\n                                    const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                    return (\n                                        <>\n                                            <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\n                                                {msg(label)}\n                                            </label>\n                                            <input\n                                                tabIndex={1}\n                                                id={autoCompleteHelper}\n                                                className={getClassName(\"kcInputClass\")}\n                                                //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                //the browser how to pre fill the form but before submit we put it back\n                                                //to username because it is what keycloak expects.\n                                                name={autoCompleteHelper}\n                                                defaultValue={login.username ?? \"\"}\n                                                type=\"text\"\n                                                {...(usernameEditDisabled\n                                                    ? { \"disabled\": true }\n                                                    : {\n                                                          \"autoFocus\": true,\n                                                          \"autoComplete\": \"off\"\n                                                      })}\n                                            />\n                                        </>\n                                    );\n                                })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameEditDisabled && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe\n                                                        ? {\n                                                              \"checked\": true\n                                                          }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                              \"value\": auth.selectedCredential\n                                          }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","id","tabIndex","href","registrationUrl","className","clsx","action","loginAction","method","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","name","defaultValue","username","type","autoComplete","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","alias","providerId","displayName","createUseClassName","params","defaultClasses","classKey","typeGuard","_value","isMatched","len","i","cls","arg","toAdd","Array","isArray","k","assert","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}