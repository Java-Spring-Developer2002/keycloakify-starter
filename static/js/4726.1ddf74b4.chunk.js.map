{"version":3,"file":"static/js/4726.1ddf74b4.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/shared/UserProfileFormFields.tsx","keycloak-theme/login/pages/RegisterUserProfile.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n","// ejected using 'npx eject-keycloak-page'\nimport { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFomSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFomSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","useFormValidation","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","name","value","displayableErrors","formGroupClassName","clsx","length","Fragment","className","id","htmlFor","displayName","required","options","validators","undefined","onChange","event","target","onBlur","option","type","disabled","readOnly","autoComplete","autocomplete","divId","style","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useState","isFomSubmittable","setIsFomSubmittable","displayMessage","exists","displayRequiredFields","headerNode","action","registrationAction","method","href","loginUrl"],"sourceRoot":""}